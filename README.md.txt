# Антагонистическая игра

## Первая часть задания

Программа содержит функцию **nash_equilibrium(A)** - функция, которая получает на вход платежную матрицу. 
В качестве вспомогательных функций используются функции **nash_equilibrium_point(A, Min)** и **draw(p, q)**. 
Функция _nash_equilibrium_point(A, Min)_ получает на вход платежную матрицу и минимальное значение платежной матрицы 
до ее преобразования(в ходе программы матрица приводится к матрице с положительными элементами). 
Данная функция возвращает значение седловой точки, если она единственная и функция завершается; если таких точек было несколько, то результаты координаты точек и значение игры выводятся на экран; если таких точек не было, то просто сообщется об отсуствие таких точек.

Далее происходит поиск решения в смешанных стратегиях, путем сведения матричной игры к ЗЛП для двух игроков. Функция возвращает векторы оптимальных стратегий для 1 и 2 игроков и значение игры. Данные значения находятся с помощью метода _linprog_ из библиотеки **SciPy**

Функция работает для Python 3

##Вторая часть задания

Данная часть задания реализована с помощью ПО Jupyter и библиотеки языка Python **matplotlib**, которая визуализирует спектры стратегий игроков. На графиках отображаются вероятности принять ту или иную стратегию.   спользуя Jupyter, приведены игры, в которых:

+ (1) Достигается равновесие по Нэшу
+ (2) Спектр стратегий не полон
+ (3) Спектр стратегий полон

Все примеры подписаны

## Необходимое ПО:

**Jupyter Notebook**, библиотеки **NumPy**, **SciPy**, **matplotlib** для Python

 # нструкция по запуску первой части:

Перейти в директорию с файлом _nash_equilibrium.py_

В терминале написать: _python nash_equilibrium.py_

Программа попросит ввести число строк платежной матрицы А

Затем необходимо ввести матрицу А по строкам

 # нструкция по запуску второй части:

Запустив среду Jupyter в браузере, необходимо открыть файл _my_project.ipynb_
# Антагонистическая игра

## Первая часть задания

Программа содержит функцию **nash_equilibrium(A)** - функция, которая получает на вход платежную матрицу. 
В качестве вспомогательных функций используются функции **nash_equilibrium_point(A, Min)** и **draw(p, q)**. 
Функция _nash_equilibrium_point(A, Min)_ получает на вход платежную матрицу и минимальное значение платежной матрицы 
до ее преобразования(в ходе программы матрица приводится к матрице с положительными элементами). 
Данная функция возвращает значение седловой точки, если она единственная и функция завершается; если таких точек было несколько, то результаты координаты точек и значение игры выводятся на экран; если таких точек не было, то просто сообщется об отсуствие таких точек.

Далее происходит поиск решения в смешанных стратегиях, путем сведения матричной игры к ЗЛП для двух игроков. Функция возвращает векторы оптимальных стратегий для 1 и 2 игроков и значение игры. Данные значения находятся с помощью метода _linprog_ из библиотеки **SciPy**

Функция работает для Python 3

##Вторая часть задания

Данная часть задания реализована с помощью ПО Jupyter и библиотеки языка Python **matplotlib**, которая визуализирует спектры стратегий игроков. На графиках отображаются вероятности принять ту или иную стратегию.   спользуя Jupyter, приведены игры, в которых:

+ (1) Достигается равновесие по Нэшу
+ (2) Спектр стратегий не полон
+ (3) Спектр стратегий полон

Все примеры подписаны

## Необходимое ПО:

**Jupyter Notebook**, библиотеки **NumPy**, **SciPy**, **matplotlib** для Python

#  нструкция по запуску первой части:

Перейти в директорию с файлом _nash_equilibrium.py_

В терминале написать: _python nash_equilibrium.py_

Программа попросит ввести число строк платежной матрицы А

Затем необходимо ввести матрицу А по строкам

#  нструкция по запуску второй части:

Запустив среду Jupyter в браузере, необходимо открыть файл _my_project.ipynb_





Нам необходимо решить антагонистическую матричную игру.
**Игрой** с математической точки зрения называется тройка <X, Y, F(x, y)>, где X = {X1, ..., Xn} и Y = {Y1, ..., Yn} --- множества стратегий первого и второго игроков соотвественно, а F(x,y) - это **функция выигрыша**. Матрица, в которой строки соответсвуют стратегиям игрока X, а столбцы --- стратегиям игрока Y, элементами a(i, j) которой являются результаты игры при i-й стратегии игрока X и j-й стратегии игрока Y, называется **матрицей выигрышей**. Матричная игра называется **антагонистической**, если в ней участвуют два игрока и значения функций выигрыша в каждой ситуации равны по величине, но противоположны по знаку  (весь проигрыш одного игрока является выигрышем другого). Нужно найти значение игры и оптимальные стратегии первого и второго игроков при заданной матрице.
# Ход решения
---

**Чистая стратегия** - возможный ход игрока, выбранный с вероятностью 1. Для каждого игрока возникает вопрос увеличения выигрыша (уменьшения проигрыша). Это можно сделать применяя **смешанные стратегии** - вероятностное распределение на множестве X для первого игрока (Y - для второго). 

 1.  Не ограничивая общности, приведем матрицу к удобному виду: если в ней есть  отрицательные элементы, то прибавив модуль наименьшего элемента матрицы мы получаем неотрицательную матрицу. Тогда мы можем сказать, что **цена игры** положительна: v > 0. 
 2. Прежде чем сводить исходную задачи к двойственной задаче линейного программирования (ЗЛП), пробуем найти решение в чистых стратегиях. Это подразумевает нахождение в матрице выигрышей седловой точки. **Седловой точкой** матрицы `а(i,j)` размера *m * n* называется такая пара (i<sub>0,j0), что для любых i=1, ..., n и j=1, ...,n выполнено c(i,j0)<= c(i0,j0) <= c(i0,j), таким образом элемент c(i0,j0) является одновременно максимальным в своем столбце и минимальным в своей строке. При решении матричной игры используется принцип минимакса, т.е. для каждой строки мы находим свой минимум(min), а затем выбираем максимум среди найденных значений(maxmin). А для каждого столбца мы находим максимум(max), а затем выбираем минимум из этих значений(minmax). Если maxmin = minmax = M, тогда, перебирая строки и столбцы, в которых min = M и max = M, соответственно, находим седловую точку.